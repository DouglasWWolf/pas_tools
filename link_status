#==============================================================================
# link_status - Reports the QSFP link status provided by various RTL designs
#
# If first parameter is "0", will report only the status of QSFP_0.
# If first parameter is "1", will report only the status of QSFP_1.
#
# Author: D. Wolf
#==============================================================================

# Grab the channel parameter from the command line
channel=$1
shift

#==============================================================================
# Display the link status.
#   $1 = The status of QSFP_0 (1=link is up, 0 = link is down)
#   $2 = The status of QSFP_1 (1=link is up, 0 = link is down)
#==============================================================================
show_status()
{
    result=
    link_ok=link_ok
    no_link=no_link

    if [ -z $channel ] && [ $1 -eq 1 ] && [ $2 -eq 1 ]; then
        result=$link_ok

    elif [ "$channel" == "0" ]; then
        test $1 -eq 1 && result=$link_ok || result=$no_link

    elif [ "$channel" == "1" ]; then
        test $2 -eq 1 && result=$link_ok || result=$no_link

    else
        echo -n "QSFP_0 "
        test $1 -eq 1 && echo $link_ok || echo $no_link
        echo -n "QSFP_1 "
        test $2 -eq 1 && echo $link_ok || echo $no_link
        exit 1
    fi
    
    echo $result
    test $result == $link_ok && exit 0 || exit 1
}
#==============================================================================


#==============================================================================
# Report the link status from RTL rx_packet_ctr
#==============================================================================
link_stat_rx_packet_ctr()
{
    source "$(dirname $0)/rx_packet_ctr_api.sh"
    show_status $(get_link_status 0) $(get_link_status 1)
}
#==============================================================================


#==============================================================================
# Report the link status from RTL nsdp_checker
#==============================================================================
link_stat_nsdp_checker()
{
    source "$(dirname $0)/nsdp_checker_api.sh"
    show_status $(get_pcs_status 0) $(get_pcs_status 1)
}
#==============================================================================


#==============================================================================
# Report the link status from RTL rdmx_dual_nic
#==============================================================================
link_stat_rdmx_dual_nic()
{
    source "$(dirname $0)/rdmx_nic_api.sh"
    stat0=$(( $(nic0 status) & 1 ))
    stat1=$(( $(nic1 status) & 1 ))
    show_status $stat0 $stat1
}
#==============================================================================


#==============================================================================
# Report the link status from RTL rdmx_dual_nic
#==============================================================================
link_stat_packet_capture()
{
    status=$(pcireg -dec 0x1010)
    stat0=$(( (status >> 0) & 1))
    stat1=$(( (status >> 1) & 1))
    show_status $stat0 $stat1
}
#==============================================================================


# Determine which RTL is loaded into the FPGA
rtl_type=$(pcireg -dec 20)


case $rtl_type in

    52125)
        link_stat_rx_packet_ctr
        ;;

    12266)
        link_stat_nsdp_checker
        ;;

    31725)
        link_stat_rdmx_dual_nic
        ;;

    121475)
        link_stat_packet_capture
        ;;
    *)
        echo "No useful RTL loaded in FPGA"
        exit 1
esac

